// loading Indicator
_start = () => {
    Animated.loop(
      Animated.timing(this.state.fadeAnim, {
        toValue: 1,
        duration: 1000,
        Infinite: true
      })
    ).start();
  };
<Animated.View
  style={{
    transform: [
      {
        rotate: this.state.fadeAnim.interpolate({
          inputRange: [0, 1],
          outputRange: ["0deg", "360deg"]
        })
      }
    ],
    height: 50,
    width: 50,
    margin: 5,
    borderWidth: 2,
    borderColor: "#888",
    borderBottomColor: "#8bffff",
    borderRadius: 50,
    justifyContent: "center"
  }}
/>
<Animated.View />

//Fade in & fade out

state={fadeAnim:new Animated.Value(0)}

fadeOut = () => {
    // Will change fadeAnim value to 0 in 5 seconds
    Animated.timing(this.state.fadeAnim, {
      toValue: 0,
      easing: Easing.back(),
      duration: 2000
    }).start();
  };
  
 fadeIn = () => {
  // Will change fadeAnim value to 1 in 5 seconds
  Animated.timing(this.state.fadeAnim, {
    toValue: 1,
    duration: 5000
  }).start();
};

// drag & release something
//in class

pan = new Animated.ValueXY();
  panResponder = PanResponder.create({
    onMoveShouldSetPanResponder: () => true,
    onPanResponderMove: Animated.event([
      null,
      { dx: this.pan.x, dy: this.pan.y }
    ]),
    onPanResponderRelease: () => {
      Animated.spring(this.pan, { toValue: { x: 0, y: 0 } }).start();
    }
  });
  
  <Animated.View
  style={{
    transform: [{ translateX: this.pan.x }, { translateY: this.pan.y }]
  }}
  {...this.panResponder.panHandlers}
>
  <View style={{height:100,width:100,backgroundColor:"pink"}} />
</Animated.View>
